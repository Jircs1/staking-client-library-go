{
  "swagger": "2.0",
  "info": {
    "title": "Coinbase Non-Custodial Staking API",
    "description": "Staking Service is a non-custodial staking service that aims to support multiple protocols and actions on them.",
    "version": "v1alpha1"
  },
  "tags": [
    {
      "name": "StakingService"
    },
    {
      "name": "Protocol",
      "description": "Protocols details"
    },
    {
      "name": "Network",
      "description": "Networks details"
    },
    {
      "name": "Validator",
      "description": "Validators details"
    },
    {
      "name": "Action",
      "description": "Actions details"
    },
    {
      "name": "Workflow",
      "description": "Workflow management details"
    }
  ],
  "host": "api.developer.coinbase.com",
  "basePath": "/staking",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1alpha1/protocols": {
      "get": {
        "summary": "List supported protocols",
        "description": "List supported protocols",
        "operationId": "listProtocols",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListProtocolsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "*UNUSED* The maximum number of protocols to return. The service may\nreturn fewer than this value.\n\nIf unspecified, 50 protocols will be returned.\nThe maximum value is 1000; values over 1000 will be floored to 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "*UNUSED* A page token as part of the response of a previous call.\nProvide this to retrieve the next page.\n\nWhen paginating, all other parameters must match the previous\nrequest to list resources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/api/v1alpha1/{name}": {
      "get": {
        "summary": "Get workflow",
        "operationId": "getWorkflow",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1Workflow"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The resource name of the workflow.\nFormat: projects/{project}/workflows/{workflow}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/workflows/[^/]+"
          }
        ],
        "tags": [
          "Workflow"
        ]
      }
    },
    "/api/v1alpha1/{name}/step": {
      "post": {
        "summary": "Perform the next step in a workflow",
        "description": "Perform the next step in a workflow",
        "operationId": "updateWorkflow",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1Workflow"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The resource name of the workflow.\nFormat: projects/{project}/workflows/{workflow}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/workflows/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "step": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The index of the step to be performed."
                },
                "signedTx": {
                  "type": "string",
                  "description": "The signed transaction to post to the network."
                }
              },
              "description": "The request message for PerformWorkflowStep.",
              "required": [
                "step",
                "signedTx"
              ]
            }
          }
        ],
        "tags": [
          "Workflow"
        ]
      }
    },
    "/api/v1alpha1/{parent}/actions": {
      "get": {
        "summary": "List supported actions",
        "description": "List supported actions",
        "operationId": "listActions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListActionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of actions.\nFormat: protocols/{protocol}/networks/{network}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "protocols/[^/]+/networks/[^/]+"
          },
          {
            "name": "pageSize",
            "description": "*UNUSED* The maximum number of actions to return. The service may\nreturn fewer than this value.\n\nIf unspecified, 50 actions will be returned.\nThe maximum value is 1000; values over 1000 will be floored to 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "*UNUSED* A page token as part of the response of a previous call.\nProvide this to retrieve the next page.\n\nWhen paginating, all other parameters must match the previous\nrequest to list resources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Action"
        ]
      }
    },
    "/api/v1alpha1/{parent}/networks": {
      "get": {
        "summary": "List supported networks",
        "description": "List supported networks",
        "operationId": "listNetworks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListNetworksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of networks.\nFormat: protocols/{protocol}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "protocols/[^/]+"
          },
          {
            "name": "pageSize",
            "description": "*UNUSED* The maximum number of networks to return. The service may\nreturn fewer than this value.\n\nIf unspecified, 50 networks will be returned.\nThe maximum value is 1000; values over 1000 will be floored to 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "*UNUSED* A page token as part of the response of a previous call.\nProvide this to retrieve the next page.\n\nWhen paginating, all other parameters must match the previous\nrequest to list resources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Network"
        ]
      }
    },
    "/api/v1alpha1/{parent}/validators": {
      "get": {
        "summary": "List supported validators",
        "description": "List supported validators",
        "operationId": "listValidators",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListValidatorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of validators.\nFormat: protocols/{protocol}/networks/{network}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "protocols/[^/]+/networks/[^/]+"
          },
          {
            "name": "pageSize",
            "description": "*UNUSED* The maximum number of validators to return. The service may\nreturn fewer than this value.\n\nIf unspecified, 50 validators will be returned.\nThe maximum value is 1000; values over 1000 will be floored to 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "*UNUSED* A page token as part of the response of a previous call.\nProvide this to retrieve the next page.\n\nWhen paginating, all other parameters must match the previous\nrequest to list resources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Validator"
        ]
      }
    },
    "/api/v1alpha1/{parent}/workflows": {
      "get": {
        "summary": "List supported workflows",
        "operationId": "listWorkflows",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListWorkflowsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe collection of networks.\nFormat: projects/{project}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+"
          },
          {
            "name": "filter",
            "description": "[AIP-160](https://google.aip.dev/160) filter\nSupported fields:\n- string delegator_address: \"0x...\"\n- string validator_address: \"0x...\"\n- string action: \"stake\", \"unstake\"\n- string protocol: \"polygon\"\n- string network: \"testnet\", \"mainnet\"\n- string amount: \"10000\"\n- string currency: \"MATIC\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of workflows to return. The service may\nreturn fewer than this value.\n\nIf unspecified, 50 workflows will be returned.\nThe maximum value is 1000; values over 1000 will be floored to 1000.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A page token as part of the response of a previous call.\nProvide this to retrieve the next page.\n\nWhen paginating, all other parameters must match the previous\nrequest to list resources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Workflow"
        ]
      },
      "post": {
        "summary": "Create workflow",
        "operationId": "createWorkflow",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1Workflow"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The resource name of the parent that owns\nthe workflow.\nFormat: projects/{project}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+"
          },
          {
            "name": "workflow",
            "description": "The workflow to create",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1Workflow",
              "required": [
                "workflow"
              ]
            }
          }
        ],
        "tags": [
          "Workflow"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alpha1Action": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Action.\nFormat: protocols/{protocolName}/networks/{networkName}/actions/{actionName}\nEx: protocols/polygon/networks/testnet/validators/stake"
        }
      },
      "title": "An Action resource, which represents an action you may take on a network,\nposted to a validator. (i.e. stake, unstake)"
    },
    "v1alpha1Amount": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The total value of the token."
        },
        "currency": {
          "type": "string",
          "description": "The currency of the token"
        }
      },
      "description": "The amount of a token you wish to perform an action\nwith."
    },
    "v1alpha1ListActionsResponse": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Action"
          },
          "description": "The list of actions."
        },
        "nextPageToken": {
          "type": "string",
          "description": "*UNUSED* A token which can be provided as `page_token` to retrieve the next page.\nIf this field is omitted, there are no additional pages."
        }
      },
      "description": "The response message for ListActions."
    },
    "v1alpha1ListNetworksResponse": {
      "type": "object",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Network"
          },
          "description": "The list of networks."
        },
        "nextPageToken": {
          "type": "string",
          "description": "*UNUSED* A token which can be provided as `page_token` to retrieve the next page.\nIf this field is omitted, there are no additional pages."
        }
      },
      "description": "The response message for ListNetworks."
    },
    "v1alpha1ListProtocolsResponse": {
      "type": "object",
      "properties": {
        "protocols": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Protocol"
          },
          "description": "The list of protocols."
        },
        "nextPageToken": {
          "type": "string",
          "description": "*UNUSED* A token which can be provided as `page_token` to retrieve the next page.\nIf this field is omitted, there are no additional pages."
        }
      },
      "description": "The response message for ListProtocols."
    },
    "v1alpha1ListValidatorsResponse": {
      "type": "object",
      "properties": {
        "validators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Validator"
          },
          "description": "The list of validators."
        },
        "nextPageToken": {
          "type": "string",
          "description": "*UNUSED* A token which can be provided as `page_token` to retrieve the next page.\nIf this field is omitted, there are no additional pages."
        }
      },
      "description": "The response message for ListValidators."
    },
    "v1alpha1ListWorkflowsResponse": {
      "type": "object",
      "properties": {
        "workflows": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Workflow"
          },
          "description": "The list of workflows."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token which can be provided as `page_token` to retrieve the next page.\nIf this field is omitted, there are no additional pages."
        }
      },
      "description": "The response message for ListWorkflows."
    },
    "v1alpha1Network": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Network.\nFormat: protocols/{protocolName}/networks/{networkName}\nEx: protocols/polygon/networks/testnet"
        },
        "isMainnet": {
          "type": "boolean",
          "description": "Represents if the network is the mainnet network\nfor the given protocol."
        }
      },
      "title": "A Network resource, which represents a blockchain network.\n(i.e. mainnet, testnet, etc.)"
    },
    "v1alpha1PolygonClaimRewardsParameters": {
      "type": "object",
      "properties": {
        "delegatorAddress": {
          "type": "string",
          "description": "The public address of the delegator you wish to\ninteract with."
        },
        "validatorAddress": {
          "type": "string",
          "description": "The public address of the validator you wish to\nperform the action to."
        }
      },
      "title": "The parameters needed to claim rewards on Polygon."
    },
    "v1alpha1PolygonRestakeParameters": {
      "type": "object",
      "properties": {
        "delegatorAddress": {
          "type": "string",
          "description": "The public address of the delegator you wish to\ninteract with."
        },
        "validatorAddress": {
          "type": "string",
          "description": "The public address of the validator you wish to\nperform the action to."
        }
      },
      "title": "The parameters needed to restake on Polygon."
    },
    "v1alpha1PolygonStakeParameters": {
      "type": "object",
      "properties": {
        "delegatorAddress": {
          "type": "string",
          "description": "The public address of the delegator you wish to\ninteract with."
        },
        "validatorAddress": {
          "type": "string",
          "description": "The public address of the validator you wish to\nperform the action to."
        },
        "amount": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The amount of the asset. For native assets or ERC-20 contracts, this is presented in terms of\natomic units (e.g., Wei for Ether) as a base-10 number."
        }
      },
      "title": "The parameters needed to stake on Polygon."
    },
    "v1alpha1PolygonStakingParameters": {
      "type": "object",
      "properties": {
        "stakeParameters": {
          "$ref": "#/definitions/v1alpha1PolygonStakeParameters",
          "title": "The parameters for stake action on Polygon"
        },
        "unstakeParameters": {
          "$ref": "#/definitions/v1alpha1PolygonUnstakeParameters",
          "title": "The parameters for unstake action on Polygon"
        },
        "restakeParameters": {
          "$ref": "#/definitions/v1alpha1PolygonRestakeParameters",
          "title": "The parameters for restake action on Polygon"
        },
        "claimRewardsParameters": {
          "$ref": "#/definitions/v1alpha1PolygonClaimRewardsParameters",
          "title": "The parameters for claim rewards action on Polygon"
        }
      },
      "title": "The parameters needed for staking on Polygon"
    },
    "v1alpha1PolygonUnstakeParameters": {
      "type": "object",
      "properties": {
        "delegatorAddress": {
          "type": "string",
          "description": "The public address of the delegator you wish to\ninteract with."
        },
        "validatorAddress": {
          "type": "string",
          "description": "The public address of the validator you wish to\nperform the action to."
        },
        "amount": {
          "$ref": "#/definitions/v1alpha1Amount",
          "description": "The amount of the asset. For native assets or ERC-20 contracts, this is presented in terms of\natomic units (e.g., Wei for Ether) as a base-10 number."
        }
      },
      "title": "The parameters needed to unstake on Polygon."
    },
    "v1alpha1Protocol": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Protocol.\nFormat: protocols/{protocolName}\nEx: protocols/polygon"
        }
      },
      "title": "A Protocol resource (i.e. polygon, ethereum, etc.)"
    },
    "v1alpha1State": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "NOT_STARTED",
        "INITIALIZED",
        "IN_PROGRESS",
        "WAITING_FOR_SIGNING",
        "WAITING_FOR_CHECKPOINTS",
        "COMPLETED",
        "FAILED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: Unspecified state, this is for backwards compatibility.\n - NOT_STARTED: Not Started represents the step is not yet started or available.\n - INITIALIZED: Initialized represents the step being ready to take action on.\n - IN_PROGRESS: In Progress represents the step is currently in progress and waiting on the network.\n - WAITING_FOR_SIGNING: Waiting for signing represents the step is currently in progress and waiting on the consumer to sign.\n - WAITING_FOR_CHECKPOINTS: Waiting for checkpoints represents the step is currently waiting for a certain checkpoint to be reached\n - COMPLETED: Completed represents the step is completed.\n - FAILED: Failed represents the step has failed.",
      "title": "The state of a step in the workflow"
    },
    "v1alpha1TxStepOutput": {
      "type": "object",
      "properties": {
        "unsignedTx": {
          "type": "string",
          "title": "The unsigned transaction which was signed in order to be broadcasted"
        },
        "signedTx": {
          "type": "string",
          "title": "The signed transaction which was asked to be broadcasted"
        },
        "txHash": {
          "type": "string",
          "description": "The hash of the broadcasted transaction."
        }
      },
      "description": "The details of a transaction being constructed and broadcasted to the network."
    },
    "v1alpha1Validator": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Validator.\nFormat: protocols/{protocolName}/networks/{networkName}/validators/{validatorName}\nEx: protocols/polygon/networks/testnet/validators/0x857679d69fE50E7B722f94aCd2629d80C355163d"
        },
        "validatorAddress": {
          "type": "string",
          "description": "The public address of the validator that you may perform workflow actions on."
        },
        "commissionRate": {
          "type": "number",
          "format": "float",
          "title": "The rate of commission for the validator"
        }
      },
      "description": "A Validator resource, which represents an active validator\nfor the given protocol network which you can submit an action\nto."
    },
    "v1alpha1WaitStepOutput": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "int64",
          "description": "The beginning of wait period."
        },
        "current": {
          "type": "string",
          "format": "int64",
          "description": "The current wait progress."
        },
        "target": {
          "type": "string",
          "format": "int64",
          "description": "The target wait end point."
        },
        "unit": {
          "$ref": "#/definitions/v1alpha1WaitUnit",
          "title": "The wait unit (like checkpoint, block, epoch etc)"
        }
      },
      "title": "The output details of a step where we wait for some kind of on-chain activity to finish like reaching a certain checkpoint, epoch or block"
    },
    "v1alpha1WaitUnit": {
      "type": "string",
      "enum": [
        "WAIT_UNIT_UNSPECIFIED",
        "SECONDS",
        "BLOCKS",
        "EPOCHS",
        "CHECKPOINTS"
      ],
      "default": "WAIT_UNIT_UNSPECIFIED",
      "description": "- WAIT_UNIT_UNSPECIFIED: Unspecified wait time\n - SECONDS: Wait time measured in seconds\n - BLOCKS: Wait time measured in blocks\n - EPOCHS: Wait time measured in epochs\n - CHECKPOINTS: Wait time measured in checkpoints",
      "title": "The unit of wait time"
    },
    "v1alpha1Workflow": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the workflow.\nFormat: projects/{projectUUID}/workflows/{workflowUUID}\nEx: projects/ 123e4567-e89b-12d3-a456-426614174000/workflows/123e4567-e89b-12d3-a456-426614174000",
          "readOnly": true
        },
        "action": {
          "type": "string",
          "title": "The resource name of the action being\nperformed.\nFormat: protocols/{protocol}/networks/{network}/actions/{action}"
        },
        "polygonStakingParameters": {
          "$ref": "#/definitions/v1alpha1PolygonStakingParameters",
          "title": "Polygon staking parameters"
        },
        "state": {
          "$ref": "#/definitions/v1alpha1State",
          "title": "The current state of the workflow",
          "readOnly": true
        },
        "currentStepId": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the current step.",
          "readOnly": true
        },
        "steps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1WorkflowStep"
          },
          "description": "The list of steps for this workflow.",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "title": "The timestamp the workflow was created",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The timestamp the workflow was last updated",
          "readOnly": true
        }
      },
      "title": "A Workflow resource",
      "required": [
        "action",
        "polygonStakingParameters"
      ]
    },
    "v1alpha1WorkflowStep": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The human readable name of the step."
        },
        "state": {
          "$ref": "#/definitions/v1alpha1State",
          "description": "State represents the state of the specific step.",
          "readOnly": true
        },
        "txStepOutput": {
          "$ref": "#/definitions/v1alpha1TxStepOutput",
          "description": "The tx step output (i.e. transaction metadata such as unsigned tx, signed tx etc)."
        },
        "waitStepOutput": {
          "$ref": "#/definitions/v1alpha1WaitStepOutput",
          "title": "The waiting details for any kind like how many checkpoints away for unbonding etc"
        }
      },
      "title": "The information for a step in the workflow"
    }
  }
}

syntax = "proto3";

package coinbase.staking.v1alpha1;

option go_package = "github.com/coinbase/staking-client-library-go/gen/go/coinbase/staking/v1alpha1";

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "coinbase/staking/v1alpha1/polygon.proto";

// The details of a transaction being constructed and broadcasted to the network.
message TxStepOutput {
  // The unsigned transaction which was signed in order to be broadcasted
  string unsigned_tx = 1;

  // The signed transaction which was asked to be broadcasted
  string signed_tx = 2;

  // The hash of the broadcasted transaction.
  string tx_hash = 3;
}

// The output details of a step where we wait for some kind of on-chain activity to finish like reaching a certain checkpoint, epoch or block
message WaitStepOutput {
  // The beginning of wait period.
  int64 start = 1;

  // The current wait progress.
  int64 current = 2;

  // The target wait end point.
  int64 target = 3;

  // The wait unit (like checkpoint, block, epoch etc)
  WaitUnit unit = 4;
}

// (-- api-linter: core::0123::resource-annotation=disabled
//     aip.dev/not-precedent: We need to do this because
//     it is only a sub resource --)
// The information for a step in the workflow
message WorkflowStep {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "The information for a step in the workflow"
    }
  };

  // The human readable name of the step.
  string name = 1;

  // State represents the state of the specific step.
  State state = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The output of the current step. It can be of tx or wait type.
  oneof output {
    // The tx step output (i.e. transaction metadata such as unsigned tx, signed tx etc).
    TxStepOutput tx_step_output = 3;

    // The waiting details for any kind like how many checkpoints away for unbonding etc
    WaitStepOutput wait_step_output = 4;
  }
}

// A Workflow resource
message Workflow {
  option (google.api.resource) = {
    type: "staking.coinbase.com/Workflow"
    pattern: "projects/{project}/workflows/{workflow}"
    singular: "workflow"
    plural: "workflows"
  };

  // The resource name of the workflow.
  // Format: projects/{projectUUID}/workflows/{workflowUUID}
  // Ex: projects/ 123e4567-e89b-12d3-a456-426614174000/workflows/123e4567-e89b-12d3-a456-426614174000
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The resource name of the action being
  // performed.
  // Format: protocols/{protocol}/networks/{network}/actions/{action}
  string action = 2 [(google.api.field_behavior) = REQUIRED];

  // The parameters of the action to take.
  oneof staking_parameters {
    // Polygon staking parameters
    PolygonStakingParameters polygon_staking_parameters = 3 [(google.api.field_behavior) = REQUIRED];
  }

  // The current state of the workflow
  State state = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The index of the current step.
  int32 current_step_id = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The list of steps for this workflow.
  repeated WorkflowStep steps = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp the workflow was created
  google.protobuf.Timestamp create_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp the workflow was last updated
  google.protobuf.Timestamp update_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// The request message for CreateWorkflow.
// The request message for CreateWorkflow.
// (-- api-linter: core::0133::request-id-field=disabled
//     aip.dev/not-precedent: We currently do not support this. --)
message CreateWorkflowRequest {
  // The resource name of the parent that owns
  // the workflow.
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "staking.coinbase.com/Workflow"
    }];

  // The workflow to create
  Workflow workflow = 2 [(google.api.field_behavior) = REQUIRED];
}

// The message for GetWorkflow.
message GetWorkflowRequest {
  // The resource name of the workflow.
  // Format: projects/{project}/workflows/{workflow}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "staking.coinbase.com/Workflow"
    }];
}

// The message for ListWorkflows.
message ListWorkflowsRequest {
  // The resource name of the parent that owns
  // the collection of networks.
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "staking.coinbase.com/Workflow"
    }];

  // [AIP-160](https://google.aip.dev/160) filter
  // Supported fields:
  // - string delegator_address: "0x..."
  // - string validator_address: "0x..."
  // - string action: "stake", "unstake"
  // - string protocol: "polygon"
  // - string network: "testnet", "mainnet"
  // - string amount: "10000"
  // - string currency: "MATIC"
  string filter = 2;

  //  The maximum number of workflows to return. The service may
  // return fewer than this value.
  //
  // If unspecified, 50 workflows will be returned.
  // The maximum value is 1000; values over 1000 will be floored to 1000.
  int32 page_size = 3;

  // A page token as part of the response of a previous call.
  // Provide this to retrieve the next page.
  //
  // When paginating, all other parameters must match the previous
  // request to list resources.
  string page_token = 4;
}

// The response message for ListWorkflows.
message ListWorkflowsResponse {
  // The list of workflows.
  repeated Workflow workflows = 1;

  // A token which can be provided as `page_token` to retrieve the next page.
  // If this field is omitted, there are no additional pages.
  string next_page_token = 2;
}

// The request message for PerformWorkflowStep.
message PerformWorkflowStepRequest {
  // The resource name of the workflow.
  // Format: projects/{project}/workflows/{workflow}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The index of the step to be performed.
  int32 step = 2 [(google.api.field_behavior) = REQUIRED];

  // The signed transaction to post to the network.
  string signed_tx = 3 [(google.api.field_behavior) = REQUIRED];
}

// The state of a step in the workflow
enum State {
  // Unspecified state, this is for backwards compatibility.
  STATE_UNSPECIFIED = 0;
  // Not Started represents the step is not yet started or available.
  NOT_STARTED = 1;
  // Initialized represents the step being ready to take action on.
  INITIALIZED = 2;
  // In Progress represents the step is currently in progress and waiting on the network.
  IN_PROGRESS = 3;
  // Waiting for signing represents the step is currently in progress and waiting on the consumer to sign.
  WAITING_FOR_SIGNING = 4;
  // Waiting for checkpoints represents the step is currently waiting for a certain checkpoint to be reached
  WAITING_FOR_CHECKPOINTS = 5;
  // Completed represents the step is completed.
  COMPLETED = 6;
  // Failed represents the step has failed.
  FAILED = 7;
}

// The unit of wait time
enum WaitUnit {
  // Unspecified wait time
  WAIT_UNIT_UNSPECIFIED = 0;
  // Wait time measured in seconds
  SECONDS = 1;
  // Wait time measured in blocks
  BLOCKS = 2;
  // Wait time measured in epochs
  EPOCHS = 3;
  // Wait time measured in checkpoints
  CHECKPOINTS = 4;
}

# Options for analysis running.
run:
  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path,
  # including the path prefix if one is set.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-dirs:
    - vendor
    - gen

linters:
  enable-all: true

  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default
  disable:
    - dupl
    - lll
    - interfacer
    - exhaustivestruct
    - nosnakecase
    - scopelint
    - ifshort
    - golint
    - deadcode
    - varcheck
    - structcheck
    - maligned
    - wrapcheck
    - varnamelen
    - funlen
    - gomoddirectives
    - gocognit
    - testpackage
    - paralleltest
    - nestif
    - cyclop
    - maintidx
    - gomnd
    - gochecknoglobals
    - gocritic
    - godox
    - forbidigo
    - exhaustruct
    - contextcheck
    - ireturn
    - goerr113
    - depguard

linters-settings:
  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map
  godot:
    # Comments to be checked: `declarations`, `toplevel`, or `all`.
    # Default: declarations
    scope: declarations
    # Check that each sentence starts with a capital letter.
    # Default: false
    capital: true
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    # Default is to use a neutral variety of English.
    locale: US
  nolintlint:
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: true
  predeclared:
    # Include method names and field names (i.e., qualified names) in checks.
    # Default: false
    q: true
  tagliatelle:
    # Check the struct tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: true
      # `camel` is used for `json` and `yaml`, and `header` is used for `header` (can be overridden)
      # Default: {}
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`, `header`
        json: camel
        yaml: camel
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab
  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(go.mongodb.org)
      - prefix(google.golang.org)
      - prefix(gopkg.in)
      - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
    # Skip generated files.
    # Default: true
    skip-generated: true
    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    # Default: false
    custom-order: true
  gofumpt:
    # Module path which contains the source code being formatted.
    # Default: ""
    module-path: github.com/coinbase/staking-client-library-go
    # Choose whether to use the extra rules.
    # Default: false
    extra-rules: true
